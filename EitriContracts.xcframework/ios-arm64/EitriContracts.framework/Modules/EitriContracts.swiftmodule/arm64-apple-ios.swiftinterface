// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-upcoming-feature DisableOutwardActorInference -enable-upcoming-feature InferSendableFromCaptures -enable-upcoming-feature GlobalActorIsolatedTypesUsability -enable-upcoming-feature MemberImportVisibility -enable-upcoming-feature InferIsolatedConformances -enable-upcoming-feature NonisolatedNonsendingByDefault -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name EitriContracts
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct EitriAppInvokingMethod {
  public let slug: Swift.String
  public let version: Swift.String
  public init(slug: Swift.String, version: Swift.String)
}
public typealias ModuleExposedMethod = nonisolated(nonsending) (EitriContracts.ModuleMethodParams) async throws -> Any?
public struct ModuleMethodParams {
  public let data: [Swift.String : Any?]
  public let invokingMethod: EitriContracts.EitriAppInvokingMethod
  public var currentViewController: UIKit.UIViewController
  public var currentNavController: UIKit.UINavigationController?
  #if compiler(>=5.3) && $NonescapableTypes
  public init(data: [Swift.String : Any?], invokingMethod: EitriContracts.EitriAppInvokingMethod, currentViewController: UIKit.UIViewController, currentNavController: UIKit.UINavigationController? = nil)
  #endif
}
public struct AppContext {
  public let version: Swift.String
  public let debugMode: Swift.Bool
  public let bundleIdentifier: Swift.String
  public init(version: Swift.String, debugMode: Swift.Bool = false, bundleIdentifier: Swift.String = Bundle.main.bundleIdentifier ?? "")
}
public protocol EitriContextProvider {
  func context() -> EitriContracts.AppContext
  func exposeMethod(named methodName: Swift.String, method: @escaping EitriContracts.ModuleExposedMethod) throws
}
public struct ModuleVersion {
  public let semver: Swift.String
  public let apiLevel: Swift.Int
  public init(semver: Swift.String, apiLevel: Swift.Int)
}
public protocol EitriModule {
  func namespace() -> Swift.String
  func version() -> EitriContracts.ModuleVersion
  func start(contextProvider: any EitriContracts.EitriContextProvider) throws
}
public protocol EitriModuleRegistry {
  #if compiler(>=5.3) && $NonescapableTypes
  func register(module: any EitriContracts.EitriModule, namespace: Swift.String?) throws
  #endif
}
extension EitriContracts.EitriModuleRegistry {
  public func register(module: any EitriContracts.EitriModule) throws
}
